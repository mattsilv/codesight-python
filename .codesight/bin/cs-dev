#!/bin/bash
# CodeSight developer mode launcher
# This script is specifically for working on CodeSight itself
# RUN THIS ONLY FROM WITHIN THE .codesight DIRECTORY

# Use XDG config path if available, otherwise fallback to HOME
if [ -n "${XDG_CONFIG_HOME}" ]; then
    CONFIG_DIR="${XDG_CONFIG_HOME}/codesight"
else
    CONFIG_DIR="${HOME}/.config/codesight"
fi

# Ensure config directory exists
mkdir -p "${CONFIG_DIR}"

# Config file for development settings
CONFIG_FILE="${CONFIG_DIR}/dev-config"

# Try to load config if it exists
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    # Create config file with default paths and explanatory comments
    cat > "$CONFIG_FILE" << EOF
# CodeSight developer configuration
# This file is automatically generated but can be modified to suit your environment
# Last updated: $(date)

# Path to the CodeSight directory (where collect_code.py resides)
CODESIGHT_DIR="$(pwd)"

# Path to the collect_code.py script 
COLLECT_CODE_SCRIPT="\${CODESIGHT_DIR}/collect_code.py"

# Output file name (relative to current directory when running cs-dev)
OUTPUT_FILE="llm.txt"
EOF
    
    # Load the config we just created
    source "$CONFIG_FILE"
    
    echo "Created default config at $CONFIG_FILE"
    echo "Please verify the paths are correct for your environment."
fi

# Verify we're in the .codesight directory
CURRENT_DIR="$(pwd)"
if [[ "$CURRENT_DIR" != *"/.codesight" ]]; then
    echo "ERROR: cs-dev must be run from within the .codesight directory!"
    echo "Please cd into the .codesight directory and try again."
    exit 1
fi

# Debug verification of paths
if [ ! -f "$COLLECT_CODE_SCRIPT" ]; then
    echo "ERROR: Could not find collect_code.py at $COLLECT_CODE_SCRIPT"
    echo "Please edit $CONFIG_FILE to set the correct path."
    exit 1
fi

# Use a virtual environment in the .codesight directory
VENV_DIR="$CODESIGHT_DIR/.venv"
if [ ! -d "$VENV_DIR" ]; then
    echo "Setting up virtual environment for CodeSight development..."
    
    # Install UV if needed
    if ! command -v uv &> /dev/null; then
        echo "Installing uv..."
        pip install uv
    fi
    
    # Create virtual environment
    cd "$CODESIGHT_DIR"
    uv venv
    source "$VENV_DIR/bin/activate"
    
    # Install dependencies
    echo "Installing dependencies..."
    uv pip install tiktoken openai pytest typer more-itertools humanize pathspec pyperclip
    
    # Return to original directory
    cd "$CURRENT_DIR"
else
    # Activate existing environment
    source "$VENV_DIR/bin/activate"
fi

# Process arguments to filter out --debug
PYTHON_ARGS=()
DEBUG=false

for arg in "$@"; do
    if [[ "$arg" == "--debug" ]]; then
        DEBUG=true
    else
        PYTHON_ARGS+=("$arg")
    fi
done

# Print debug info
if [[ "$DEBUG" == "true" ]]; then
    echo "CodeSight Developer Mode Debug Info:"
    echo "  Current directory: $CURRENT_DIR" 
    echo "  CodeSight directory: $CODESIGHT_DIR"
    echo "  Virtual env: $VENV_DIR"
    echo "  Python script: $COLLECT_CODE_SCRIPT"
fi

# Set default output file if not defined in config
OUTPUT_FILE="${OUTPUT_FILE:-llm.txt}"

# Run CodeSight in dogfood mode - analyze the current directory's contents
python "$COLLECT_CODE_SCRIPT" "." --dogfood --prompt improvement --output-file "$OUTPUT_FILE" "${PYTHON_ARGS[@]}"

echo "Developer mode completed successfully"