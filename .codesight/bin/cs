#!/bin/bash
# CodeSight quick launcher

# This is a simplified version focusing on reliability and simplicity

# Find the codesight installation directory
SCRIPT_PATH="$0"
if [[ -n "${BASH_SOURCE[0]}" ]]; then
    # For bash when script is sourced
    SCRIPT_PATH="${BASH_SOURCE[0]}"
fi

# Get absolute path of the script - with fallbacks for symlinks
if command -v realpath &> /dev/null; then
    # Use realpath if available
    SCRIPT_DIR=$(dirname "$(realpath "$SCRIPT_PATH")")
else
    # Manual resolution
    SOURCE="$SCRIPT_PATH"
    while [ -h "$SOURCE" ]; do
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        SOURCE="$(readlink "$SOURCE")"
        [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    done
    SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
fi

CODESIGHT_DIR="$(dirname "$SCRIPT_DIR")"

# Basic validation
if [ ! -f "$SCRIPT_DIR/cs.py" ]; then
    echo "Error: CodeSight installation is incomplete or corrupted"
    echo "Cannot find cs.py at $SCRIPT_DIR"
    exit 1
fi

# Create and use a virtual environment in the current project
PROJECT_DIR="$(pwd)"
VENV_DIR="$PROJECT_DIR/.venv"

# Handle virtual environment
install_dependencies() {
    echo "Installing dependencies..."
    if command -v uv &> /dev/null; then
        uv pip install tiktoken openai pytest typer more-itertools humanize pathspec
    else
        pip install tiktoken openai pytest typer more-itertools humanize pathspec
    fi
}

verify_dependencies() {
    # Verify key dependencies are installed
    if ! python -c "import humanize, tiktoken, pathspec" &>/dev/null; then
        echo "Missing required dependencies. Installing now..."
        install_dependencies
    fi
}

if [ ! -d "$VENV_DIR" ]; then
    echo "Setting up virtual environment for project at $PROJECT_DIR..."
    
    # Install UV if needed
    if ! command -v uv &> /dev/null; then
        echo "Installing uv..."
        pip install uv
    fi
    
    # Create and activate virtual environment
    uv venv
    source "$VENV_DIR/bin/activate"
    
    # Install dependencies
    install_dependencies
else
    # Check if the user is already in a venv
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # If already in a venv but it's not our project venv, deactivate it
        if [[ "$VIRTUAL_ENV" != "$VENV_DIR" ]]; then
            echo "Exiting current virtual environment..."
            deactivate 2>/dev/null || true
            # Now activate our project venv
            source "$VENV_DIR/bin/activate"
        fi
        # If already in our project venv, do nothing
    else
        # Not in any venv, activate our project venv
        source "$VENV_DIR/bin/activate"
    fi
    
    # Always verify dependencies are installed
    verify_dependencies
fi

# Print debugging info if requested
if [[ "$*" == *"--debug"* ]]; then
    # Get version from cs.py
    VERSION=$(grep -o '"[0-9]\+\.[0-9]\+\.[0-9]\+"' "$SCRIPT_DIR/cs.py" 2>/dev/null | tr -d '"' || echo "unknown")
    
    echo "CodeSight Debug Info (v$VERSION):"
    echo "  Script directory: $SCRIPT_DIR"
    echo "  CodeSight directory: $CODESIGHT_DIR"
    echo "  Project directory: $PROJECT_DIR"
    echo "  Virtual env: $VENV_DIR"
    echo "  Python script: $SCRIPT_DIR/cs.py"
    echo "  Installation script: $CODESIGHT_DIR/bin/install.sh"
    echo "  Uninstall script: $CODESIGHT_DIR/bin/uninstall.sh"
    echo "  Wrapper path: $(which cs 2>/dev/null || echo "not found")"
    echo "  Developer wrapper: $(which cs-dev 2>/dev/null || echo "not found")"
    
    echo
    echo "Environment:"
    echo "  Python version: $(python --version 2>&1)"
    echo "  Shell: $SHELL"
    echo "  Current VIRTUAL_ENV: ${VIRTUAL_ENV:-"none"}"
fi

# Run the CS command
python "$SCRIPT_DIR/cs.py" "$@"